/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PrawnSeedService } from "../prawnSeed.service";
import { PrawnSeedCreateInput } from "./PrawnSeedCreateInput";
import { PrawnSeed } from "./PrawnSeed";
import { PrawnSeedFindManyArgs } from "./PrawnSeedFindManyArgs";
import { PrawnSeedWhereUniqueInput } from "./PrawnSeedWhereUniqueInput";
import { PrawnSeedUpdateInput } from "./PrawnSeedUpdateInput";

export class PrawnSeedControllerBase {
  constructor(protected readonly service: PrawnSeedService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PrawnSeed })
  async createPrawnSeed(
    @common.Body() data: PrawnSeedCreateInput
  ): Promise<PrawnSeed> {
    return await this.service.createPrawnSeed({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PrawnSeed] })
  @ApiNestedQuery(PrawnSeedFindManyArgs)
  async prawnSeeds(@common.Req() request: Request): Promise<PrawnSeed[]> {
    const args = plainToClass(PrawnSeedFindManyArgs, request.query);
    return this.service.prawnSeeds({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PrawnSeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async prawnSeed(
    @common.Param() params: PrawnSeedWhereUniqueInput
  ): Promise<PrawnSeed | null> {
    const result = await this.service.prawnSeed({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PrawnSeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePrawnSeed(
    @common.Param() params: PrawnSeedWhereUniqueInput,
    @common.Body() data: PrawnSeedUpdateInput
  ): Promise<PrawnSeed | null> {
    try {
      return await this.service.updatePrawnSeed({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PrawnSeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePrawnSeed(
    @common.Param() params: PrawnSeedWhereUniqueInput
  ): Promise<PrawnSeed | null> {
    try {
      return await this.service.deletePrawnSeed({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
